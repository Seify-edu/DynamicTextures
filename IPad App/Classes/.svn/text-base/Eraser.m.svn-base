//
//  Eraser.m
//  KidsPaint
//
//  Created by Roman Smirnov on 11.05.12.
//  Copyright (c) 2012 Aplica. All rights reserved.
//

#import "Eraser.h"

@interface Eraser()
@property (readwrite) eraserState state;
@end

@implementation Eraser

@synthesize delegate;
@synthesize alpha, position;
@synthesize translationX, translationY, translationZ;
@synthesize rotationX, rotationY, rotationZ;
@synthesize scaleX, scaleY, scaleZ;

- (void)setState:(eraserState)newstate{
    state = newstate;
    //    NSLog(@"%@ : %@ new state = %d", self, NSStringFromSelector(_cmd), state);
}

- (eraserState)state{
    return state;
}

- (ThreeDAnimation *)animation{
    if (!animation){
        animation = [[ThreeDAnimation alloc] init];
        animation.state = ANIMATION_STATE_STOPPED;
    }
    return animation;
}

- (id)init{
    if (self = [super init]){
        self.state = ERASER_STATE_OUT_OF_SCREEN;
    }
    return self;
}

- (BOOL)isIntersectsWithPoint:(CGPoint)point{
    return (self.position.origin.x < point.x &&
            self.position.origin.x + self.position.size.width > point.x &&
            self.position.origin.y < point.y &&
            self.position.origin.y + self.position.size.height > point.y);
}

- (void)changeStateTo:(eraserState)newstate AtTime:(double)currtime{

    switch (newstate) {
        case ERASER_STATE_APPEARS_ON_SCREEN:{
            self.animation.startAlpha = self.alpha;
            self.animation.endAlpha = 1.0;
            self.animation.startPosition = self.position;
            self.animation.endPosition = CGRectMake(ERASER_OFFSET_X,
                                                    ERASER_OFFSET_Y, 
                                                    ERASER_WIDTH, 
                                                    ERASER_HEIGHT);
            self.animation.startTime = currtime;
            self.animation.endTime = self.animation.startTime + ERASER_UNHINDING_DURATION;
            self.animation.state = ANIMATION_STATE_PLAYING;

            break;
        }
            
        case ERASER_STATE_DISAPPERS_FROM_SCREEN:{
            
            self.animation.startAlpha = self.alpha;
            self.animation.endAlpha = 1.0;
            self.animation.startPosition = self.position;
            self.animation.endPosition = CGRectMake(ERASER_OFFSET_X - DRAWING_TOOLS_BOX_WIDTH,
                                                    ERASER_OFFSET_Y, 
                                                    ERASER_WIDTH, 
                                                    ERASER_HEIGHT);
            self.animation.startTime = currtime;
            self.animation.endTime = self.animation.startTime + ERASER_HINDING_DURATION;
            self.animation.state = ANIMATION_STATE_PLAYING;
            
            break;
        }

        case ERASER_STATE_SELECTED:{
            
            break;
        }
            
        case ERASER_STATE_UNSELECTED:{
            
            break;
        }
            
        default: {
            NSLog(@"%@ : %@ Warning! Unexpected eraser's new state: %d", self, NSStringFromSelector(_cmd), newstate);
            break;
        }
    }

    
    if (self.state == ERASER_STATE_UNSELECTED && newstate == ERASER_STATE_SELECTED){
        self.position = CGRectMake(self.position.origin.x, 
                                   self.position.origin.y, 
                                   ERASER_SELECTED_WIDTH, 
                                   ERASER_SELECTED_WIDTH);
    }
    else if (self.state == ERASER_STATE_SELECTED && newstate == ERASER_STATE_UNSELECTED){
        self.position = CGRectMake(self.position.origin.x, 
                                   self.position.origin.y, 
                                   ERASER_WIDTH, 
                                   ERASER_HEIGHT);
        [self.delegate eraserBecameUnselected];

    }
    
    self.state = newstate;
}

- (void)updatePhysicsAtTime:(double)currtime{
    [self.animation updatePhysicsAtTime:currtime];
    if (self.animation.state == ANIMATION_STATE_PLAYING){
        self.alpha = self.animation.alpha;
        self.position = self.animation.position;
    }
    
    switch (self.state) {
        case ERASER_STATE_APPEARS_ON_SCREEN:{
            if (self.animation.state == ANIMATION_STATE_STOPPED){
                self.state = ERASER_STATE_UNSELECTED;
            }
            break;
        }
            
        case ERASER_STATE_DISAPPERS_FROM_SCREEN:{
            if (self.animation.state == ANIMATION_STATE_STOPPED){
                self.state = ERASER_STATE_OUT_OF_SCREEN;
            }
            break;
        }
          
        case ERASER_STATE_OUT_OF_SCREEN:
        case ERASER_STATE_UNSELECTED:
        case ERASER_STATE_SELECTED:{
            break;
        }
            
        default:{
            NSLog(@"%@ : %@ unexpected eraser state: %d", self, NSStringFromSelector(_cmd), self.state);
            break;
        }
    }
}

#pragma mark - Gesture handlers

- (void)touchBeganAtLocation:(CGPoint)location{
    
    //    NSLog(@"%@ : %@" , self, NSStringFromSelector(_cmd));
    
    if ([self isIntersectsWithPoint:location]){
        if (self.state == ERASER_STATE_UNSELECTED){
            [self changeStateTo:ERASER_STATE_SELECTED AtTime:CFAbsoluteTimeGetCurrent()];
            [self.delegate eraserBecameSelected];
            
        }
        else if (self.state == ERASER_STATE_SELECTED){
            [self changeStateTo:ERASER_STATE_UNSELECTED AtTime:CFAbsoluteTimeGetCurrent()];            
            [self.delegate eraserBecameUnselected];
        }
    }
}

- (void)touchMovedAtLocation:(CGPoint)location PreviousLocation:(CGPoint)previousLocation{
    //    NSLog(@"%@ : %@" , self, NSStringFromSelector(_cmd));
}

- (void)touchEndedAtLocation:(CGPoint)location{
    //    NSLog(@"%@ : %@" , self, NSStringFromSelector(_cmd));    
}

- (void)touchesCancelledLocation:(CGPoint)location{
    //    NSLog(@"%@ : %@" , self, NSStringFromSelector(_cmd));
}

- (void)dealloc{
    if (animation) [animation release];
    [super dealloc];
}

@end
